-------------------------Задача 1

package main

import (
 "fmt"
 "sync"
)

func square(wg *sync.WaitGroup, num int) {
 defer wg.Done()
 fmt.Printf("Square of %d is %d\n", num, num*num)
}

func main() {
 numbers := []int{2, 4, 6, 8, 10}
 var wg sync.WaitGroup

 for _, num := range numbers {
  wg.Add(1)
  go square(&wg, num)
 }

 wg.Wait()
}

------------------------Задача 2

package main

import (
 "fmt"
 "math"
)

func groupTemperatures(temps []float64) map[int][]float64 {
 groups := make(map[int][]float64)

 for _, temp := range temps {
  group := int(math.Floor(temp/10.0)) * 10
  groups[group] = append(groups[group], temp)
 }

 return groups
}

func main() {
 temperatures := []float64{-25.4, -27.0, 13.0, 19.0, 15.5, 24.5, -21.0, 32.5}
 result := groupTemperatures(temperatures)

 for group, temps := range result {
  fmt.Printf("%d: %v\n", group, temps)
 }
}


--------------------Задача 3

package main

import (
 "fmt"
)

func reverseString(input string) string {
 runes := []rune(input)
 for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
  runes[i], runes[j] = runes[j], runes[i]
 }
 return string(runes)
}

func main() {
 str := "главрыба"
 fmt.Println(reverseString(str)) // Output: абырвалг
}



-----------------------Задача 4


package main

import (
 "fmt"
 "strings"
)

func reverseWords(sentence string) string {
 words := strings.Fields(sentence)
 for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {
  words[i], words[j] = words[j], words[i]
 }
 return strings.Join(words, " ")
}

func main() {
 sentence := "snow dog sun"
 fmt.Println(reverseWords(sentence)) // Output: sun dog snow
}



-----------------------Задача 5

package main

import (
 "fmt"
 "strings"
)

func allUnique(input string) bool {
 input = strings.ToLower(input)
 seen := make(map[rune]bool)

 for _, char := range input {
  if seen[char] {
   return false
  }
  seen[char] = true
 }
 return true
}

func main() {
 fmt.Println(allUnique("abcd"))        // true
 fmt.Println(allUnique("abCdefAaf"))   // false
 fmt.Println(allUnique("aabcd"))       // false
}
